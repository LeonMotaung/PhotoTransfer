<!DOCTYPE html>
<html lang="en" class="h-full">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Photo Upload & Gallery - ByteBurst</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@700&family=Roboto&display=swap" rel="stylesheet" />
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body {
            margin: 0;
            font-family: 'Roboto', sans-serif;
            background-color: #000;
            color: #fff;
        }

        .background-circles .circle {
            position: absolute;
            border-radius: 50%;
            background-color: rgb(212, 255, 0);
            opacity: 0.2;
        }

        .background-circles .circle.small {
            width: 50px;
            height: 50px;
            bottom: 20px;
            left: 20px;
        }

        .background-circles .circle.medium {
            width: 100px;
            height: 100px;
            top: 20px;
            right: 20px;
        }

        .background-circles .circle.large {
            width: 150px;
            height: 150px;
            bottom: 50px;
            right: 50px;
        }
    </style>
</head>
<body class="flex flex-col min-h-screen bg-black relative">
    <!-- Background Circles -->
    <div class="background-circles">
        <div class="circle small"></div>
        <div class="circle medium"></div>
        <div class="circle large"></div>
    </div>

    <nav class="bg-black text-white fixed w-full z-10 top-0 shadow">
        <div class="container mx-auto flex flex-wrap items-center justify-between py-4 px-4">
            <!-- Logo -->
            <div class="flex items-center gap-x-2">
                <img src="/images/New Project.png" alt="Logo" class="w-10 h-10 rounded-full" />
                <a href="/" class="text-white font-bold text-2xl lg:text-4xl">BYTEBURST</a>
            </div>

            <!-- Hamburger Menu for Mobile -->
            <div class="block lg:hidden">
                <button id="nav-toggle" class="text-white text-2xl focus:outline-none">
                    <i class="fas fa-bars"></i>
                </button>
            </div>

            <!-- Navigation Links -->
            <div id="nav-content" class="hidden lg:flex lg:items-center w-full lg:w-auto">
                <ul class="lg:flex items-center space-y-4 lg:space-y-0 lg:space-x-6">
                    <li><a href="/" class="hover:text-gray-400">HOME</a></li>
                    <li><a href="/about" class="hover:text-gray-400">ABOUT US</a></li>
                    <li><a href="/contact" class="hover:text-gray-400">CONTACT</a></li>
                    <li><a href="/dashboard" class="hover:text-gray-400">DASHBOARD</a></li>
                    <li><a href="/signin" class="hover:text-gray-400">SIGN OUT</a></li>
                </ul>
            </div>
        </div>
    </nav>
    <!-- Main Content -->
    <main class="flex-grow container mx-auto px-4 py-8 pt-24 relative z-[1]">
        <!-- Upload Section -->
        <div class="max-w-md mx-auto bg-gray-800/80 backdrop-blur-sm rounded-lg shadow-lg p-6 mb-8">
            <h2 class="text-2xl font-bold mb-6 text-center text-yellow-400">Upload New Photo</h2>
            
            <form action="/photo" method="POST" enctype="multipart/form-data" class="space-y-6">
                <!-- Image Preview -->
                <div class="mb-4">
                    <div id="imagePreview" class="hidden w-full h-48 rounded-lg bg-gray-700/80 flex items-center justify-center mb-2">
                        <img id="preview" class="max-h-full max-w-full object-contain">
                    </div>
                </div>

                <!-- File Upload -->
                <div class="relative">
                    <label class="block text-sm font-medium text-gray-300 mb-2">Choose Image</label>
                    <input type="file" name="image" id="imageInput" accept="image/*" required
                        class="block w-full text-sm text-gray-300
                        file:mr-4 file:py-2 file:px-4
                        file:rounded-full file:border-0
                        file:text-sm file:font-semibold
                        file:bg-yellow-400 file:text-black
                        hover:file:bg-yellow-300
                        cursor-pointer">
                    <p class="mt-1 text-sm text-gray-400">PNG, JPG, GIF up to 5MB</p>
                </div>

                <!-- Title -->
                <div>
                    <label class="block text-sm font-medium text-gray-300 mb-2">Title</label>
                    <input type="text" name="title" required
                        class="w-full px-4 py-2 rounded-lg bg-gray-700/80 text-white border-none
                        focus:outline-none focus:ring-2 focus:ring-yellow-400 transition-colors duration-300">
                </div>

                <!-- Description -->
                <div>
                    <label class="block text-sm font-medium text-gray-300 mb-2">Description</label>
                    <textarea name="description" rows="3"
                        class="w-full px-4 py-2 rounded-lg bg-gray-700/80 text-white border-none
                        focus:outline-none focus:ring-2 focus:ring-yellow-400 transition-colors duration-300"></textarea>
                </div>

                <!-- Submit Button -->
                <button type="submit"
                    class="w-full py-2 px-4 bg-yellow-400 text-black font-bold rounded-lg 
                    hover:bg-yellow-300 focus:outline-none focus:ring-2 focus:ring-yellow-400 
                    transition-colors duration-300">
                    Upload Photo
                </button>
            </form>
        </div>

        <!-- Gallery Section -->
        <div class="mt-12 mb-8">
            <h2 class="text-2xl font-bold mb-6 text-center text-yellow-400">My Gallery</h2>
            
            <% if (locals.images && images.length > 0) { %>
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                    <% images.forEach(image => { %>
                        <div class="bg-gray-800/80 backdrop-blur-sm rounded-lg shadow-lg overflow-hidden 
                                hover:shadow-yellow-400/20 transition-shadow duration-300">
                            <div class="relative h-48">
                                <img src="<%= image.imagePath %>" 
                                     alt="<%= image.title %>" 
                                     class="w-full h-full object-cover">
                            </div>
                            <div class="p-4">
                                <h3 class="font-bold text-lg mb-2 text-yellow-400"><%= image.title %></h3>
                                <p class="text-gray-300 text-sm mb-2"><%= image.description %></p>
                                <div class="flex justify-between items-center text-sm text-gray-400">
                                    <span><%= new Date(image.createdAt).toLocaleDateString() %></span>
                                    <button onclick="deleteImage('<%= image._id %>')" 
                                            class="text-red-400 hover:text-red-300 transition-colors duration-300">
                                        <i class="fas fa-trash"></i> Delete
                                    </button>
                                </div>
                            </div>
                        </div>
                    <% }) %>
                </div>
            <% } else { %>
                <div class="text-center text-gray-400 bg-gray-800/80 backdrop-blur-sm rounded-lg shadow-lg p-8">
                    <p>No images uploaded yet.</p>
                </div>
            <% } %>
        </div>
    </main>

   
    <%- include('footer') %>
    <!-- Add this before </body> -->
<script>
    // Image preview functionality
    const imageInput = document.getElementById('imageInput');
    const imagePreview = document.getElementById('imagePreview');
    const preview = document.getElementById('preview');
    const galleryContainer = document.querySelector('.grid');
    const noImagesMessage = document.querySelector('.text-center.text-gray-400');

    // Handle form submission
    // Update the form submission handler
document.querySelector('form').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formData = new FormData(e.target);
    
    try {
        const response = await fetch('/photo', {
            method: 'POST',
            body: formData
        });

        const result = await response.json();

        if (response.ok) {
            // Clear form
            e.target.reset();
            imagePreview.classList.add('hidden');
            
            // Fetch and update gallery
            await updateGallery();
            
            // Show success message
            showMessage(result.message, 'success');
        } else {
            showMessage(result.error || 'Error uploading image', 'error');
        }
    } catch (error) {
        console.error('Upload error:', error);
        showMessage('Error uploading image', 'error');
    }
});

// Add this to initialize the gallery on page load
document.addEventListener('DOMContentLoaded', () => {
    updateGallery();
});

    // Image preview handler
    imageInput.addEventListener('change', function(e) {
        const file = e.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = function(e) {
                preview.src = e.target.result;
                imagePreview.classList.remove('hidden');
            }
            reader.readAsDataURL(file);
        }
    });

    // Delete image handler
    async function deleteImage(imageId) {
        if (confirm('Are you sure you want to delete this image?')) {
            try {
                const response = await fetch(`/photo/${imageId}`, {
                    method: 'DELETE'
                });
                
                if (response.ok) {
                    await updateGallery();
                    showMessage('Image deleted successfully!', 'success');
                } else {
                    showMessage('Error deleting image', 'error');
                }
            } catch (error) {
                console.error('Delete error:', error);
                showMessage('Error deleting image', 'error');
            }
        }
    }

    // Function to update gallery
    async function updateGallery() {
        try {
            const response = await fetch('/photo/gallery');
            const images = await response.json();
            
            if (images.length > 0) {
                const galleryHTML = images.map(image => `
                    <div class="bg-gray-800/80 backdrop-blur-sm rounded-lg shadow-lg overflow-hidden 
                            hover:shadow-yellow-400/20 transition-shadow duration-300">
                        <div class="relative h-48">
                            <img src="${image.imagePath}" 
                                 alt="${image.title}" 
                                 class="w-full h-full object-cover">
                        </div>
                        <div class="p-4">
                            <h3 class="font-bold text-lg mb-2 text-yellow-400">${image.title}</h3>
                            <p class="text-gray-300 text-sm mb-2">${image.description}</p>
                            <div class="flex justify-between items-center text-sm text-gray-400">
                                <span>${new Date(image.createdAt).toLocaleDateString()}</span>
                                <button onclick="deleteImage('${image._id}')" 
                                        class="text-red-400 hover:text-red-300 transition-colors duration-300">
                                    <i class="fas fa-trash"></i> Delete
                                </button>
                            </div>
                        </div>
                    </div>
                `).join('');
                
                if (galleryContainer) {
                    galleryContainer.innerHTML = galleryHTML;
                    galleryContainer.parentElement.classList.remove('hidden');
                    if (noImagesMessage) noImagesMessage.classList.add('hidden');
                }
            } else {
                if (galleryContainer) galleryContainer.parentElement.classList.add('hidden');
                if (noImagesMessage) noImagesMessage.classList.remove('hidden');
            }
        } catch (error) {
            console.error('Gallery update error:', error);
            showMessage('Error updating gallery', 'error');
        }
    }

    // Function to show messages
    function showMessage(message, type) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `fixed top-4 right-4 px-6 py-3 rounded-lg text-white ${
            type === 'success' ? 'bg-green-500' : 'bg-red-500'
        } transition-opacity duration-300`;
        messageDiv.textContent = message;
        
        document.body.appendChild(messageDiv);
        
        setTimeout(() => {
            messageDiv.style.opacity = '0';
            setTimeout(() => messageDiv.remove(), 300);
        }, 3000);
    }
</script>
   
    
</body>
</html>